package main

type Steel Peg {
}

Program <- Statement+

Statement <- (Com / External / Expression)? Com? "\n"

Com <- " "* "#" [^\n]*

#  External

External <- "external" ExternalBlock

ExternalBlock <- "@{@\n" ExternalDef+ "@}@"

ExternalDef <- Identifier "(" ExternalArgument? ")" ":" Type "\n"

ExternalArgument <- Type ("," ExternalArgument)?

#  Expressions

Expression <- Class / Return / If / Assignation / Assignable

Return <- "return" Assignable

Assignation <- Identifier (":" Type)? "=" Assignable

Assignable <- New / Operation / Object / FunctionDeclaration / Array / FunctionCall / ComputedProperty / Literal

New <- "new" Identifier "(" Argument* ")"

# ComputedProperty

ComputedProperty <- Identifier (BraceComputedProperty / DotComputedProperty)?

BraceComputedProperty <- "[" (Operation / FunctionCall / ComputedProperty / Literal) "]" (BraceComputedProperty / DotComputedProperty)?

DotComputedProperty <- "." ComputedProperty

# Object

Object <- ObjectInline / ObjectBlock

ObjectInline <- ("{" ObjectProperty? "}") / ObjectProperty

ObjectBlock <- ("@{@\n" ObjectProperty? "\n@}@") / ("{@{@\n" ObjectProperty? "\n@}@\n}")

ObjectProperty <- Identifier ":" Assignable (","? "\n"? ObjectProperty)?

# If Else

If <- "if" BoolTest (Block / ("=>" Expression)) ElseIf? Else?

ElseIf <- "elseif" BoolTest (Block / ("=>" Expression)) ElseIf? Else?

Else <-  "else" (Block / ("=>" Expression))

BoolTest <- Assignable "<" (BoolTest / Assignable)

# Class

Class <- "class" Identifier ClassBlock

ClassBlock <- "@{@\n" ClassEntry+ "@}@"

ClassEntry <- Identifier (":" Type)? ("="Assignable)? "\n"

# Assignables

Array <- "[" ArrayElem "]"

ArrayElem <- Assignable ("," ArrayElem)?

Operation <- Operand Operator (Operation / Operand)

Operand <- FunctionCall / ComputedProperty / Decimal

Operator <- "+" / "-" / "/" / "*"

# FunctionDeclaration

FunctionDeclaration <- Arguments? (":" Type)? NoReturn? "->" (Block / Expression)

Arguments <- "(" ArgumentDecl* ")"

ArgumentDecl <- Identifier (":" Type)? ","?

NoReturn <- "!"

Block <- "@{@\n" Statement+ "@}@"

# Function Call

FunctionCall <- VarUse "(" Argument? ")"

Argument <- Assignable ("," Argument)?

# Vars

Identifier <- ([_a-zA-Z][a-zA-Z0-9_]*)

VarUse <- ([_a-zA-Z][a-zA-Z0-9_]*)

# Types

Type <- FuncType / ArrayType / Identifier

ArrayType <- "[" Type "]"

FuncType <- "(" FuncTypeArg ")" ":" Type

FuncTypeArg <-Type ("," FuncTypeArg)?

# Literals

Literal <- String / Decimal

Decimal <- "0" / [1-9][0-9]*

String <- "\"" [^"]* "\""
